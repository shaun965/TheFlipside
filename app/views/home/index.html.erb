<div class = "user_id" style="display: none;"><%= current_user.id %></div>
<div class = "row">
<div class = "large-12 medium-12 small-12 columns">
<h2>The FlipSide</h2>
<div id="locationField">
  <input id="autocomplete" placeholder="Enter your address" onFocus="geolocate()" type="text"></input>
  <input type="button" value="Search an address!" onclick="codeAddress()">
</div>

</div>
</div>

<div class = "row" style="padding-top: 40px;">
  <div class = "large-6 medium-6 small-6 columns">
    <button onclick="revealSearch()">Recent searches</button>
  </div>
  <div class = "large-6 medium-6 small-6 columns">
    <button onclick="revealPost()">Recent posts &nbsp&nbsp&nbsp&nbsp</button>
  </div>
</div>

<div class = "row searches" style="padding-top: 40px; display: none;">
  <div class = "large-12 medium-12 small-12 columns">
    <% for i in (-5..-1).reverse_each %>
      <%= link_to @historys[i].address, location_path(id: @historys[i].location_id), method: "get" %>
      <br></br>
    <% end %>
  </div>
</div>

<div class = "row posts" style="padding-top: 40px; display: none;">
  <div class = "large-12 medium-12 small-12 columns">
    <% for i in (-5..-1).reverse_each %>
      <%= link_to @posts[i].text, location_path(id: @posts[i].location_id), method: "get" %>
      <br></br>
    <% end %>
  </div>
</div>





<script>
// This example displays an address form, using the autocomplete feature
// of the Google Places API to help users fill in the information.

function revealSearch(){
  $('.searches').css("display","inline");
  $('.posts').css("display","none");
}

function revealPost(){
  $('.searches').css("display","none");
  $('.posts').css("display","inline");
}


function codeAddress() {


    var directionsDisplay;
    var directionsService = new google.maps.DirectionsService();
    var map;
    var dirLongitude;
    var dirLattitude;
    var userId = document.getElementsByClassName("user_id")[0].innerHTML

    var address = document.getElementById("autocomplete").value;

    //Google direction to get the street location
    var request = {
        origin:address,
        destination:address,
        travelMode: google.maps.TravelMode.DRIVING
      };


    directionsService.route(request, function(response, status) {
    if (status == google.maps.DirectionsStatus.OK) {
      //Post longitude and lattitude of direction
      dirLongitude = response.routes[0].legs[0].start_location.lng();
      dirLattitude = response.routes[0].legs[0].start_location.lat();
      geoFunc();

    }
    });


    function geoFunc() {


      geocoder.geocode( { 'address': address}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {

          $.ajax({
              type: "post",
              url: "/searchLocation",
              data: {longitude: results[0].geometry.location.lng(), lattitude: results[0].geometry.location.lat(), dir_longitude: dirLongitude, dir_lattitude: dirLattitude, user_id: userId, address: address },
              success: function(resp){
                console.log("resp")
                window.location.href = window.location.href + "locations/" + resp.id
              }
            });



        } else {
          alert("Geocode was not successful for the following reason: " + status);
        }
      });
    }
  }

var placeSearch, autocomplete;
var componentForm = {
  street_number: 'short_name',
  route: 'long_name',
  locality: 'long_name',
  administrative_area_level_1: 'short_name',
  country: 'long_name',
  postal_code: 'short_name'
};

function initialize() {
  geocoder = new google.maps.Geocoder();
  // Create the autocomplete object, restricting the search
  // to geographical location types.
  autocomplete = new google.maps.places.Autocomplete(
      /** @type {HTMLInputElement} */(document.getElementById('autocomplete')),
      { types: ['geocode'] });
  // When the user selects an address from the dropdown,
  // populate the address fields in the form.
  google.maps.event.addListener(autocomplete, 'place_changed', function() {
    fillInAddress();
  });
}

// [START region_fillform]
function fillInAddress() {
  // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();

  for (var component in componentForm) {
    document.getElementById(component).value = '';
    document.getElementById(component).disabled = false;
  }

  // Get each component of the address from the place details
  // and fill the corresponding field on the form.
  for (var i = 0; i < place.address_components.length; i++) {
    var addressType = place.address_components[i].types[0];
    if (componentForm[addressType]) {
      var val = place.address_components[i][componentForm[addressType]];
      document.getElementById(addressType).value = val;
    }
  }
}
// [END region_fillform]

// [START region_geolocation]
// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var geolocation = new google.maps.LatLng(
          position.coords.latitude, position.coords.longitude);
      var circle = new google.maps.Circle({
        center: geolocation,
        radius: position.coords.accuracy
      });
      autocomplete.setBounds(circle.getBounds());
    });
  }
}

// [END region_geolocation]
</script>
